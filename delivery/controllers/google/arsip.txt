func (cont *Controller) GoogleCallback() echo.HandlerFunc {
	return func(c echo.Context) error {
		state := c.Request().URL.Query()["state"][0]
		// log.Info(state)
		if state != "randomstate" {
			return c.JSON(http.StatusBadRequest, templates.BadRequest(nil, "error cookie "+state, nil))
		}

		// var err =api.ReadCookie(c)
		// log.Info(err)
		// if err != nil {
		// 	return c.JSON(http.StatusBadRequest, templates.BadRequest(nil, "error in callback "+err.Error(), nil))
		// }

		// code := c.Request().URL.Query()["code"][0]

		data, _, err := api.GetUserDataFromGoogle(c.FormValue("code"), cont.conf)
		if err != nil {
			return c.JSON(http.StatusBadRequest, templates.BadRequest(nil, "error in callback "+err.Error(), nil))
		}

		// data = json.Marshal()

		var user UserInfo

		if err := json.Unmarshal(data, &user); err != nil {
			return c.JSON(http.StatusBadRequest, templates.BadRequest(nil, "error convert to struct "+err.Error(), nil))
		}
		// log.Info(user)
		return c.JSON(http.StatusOK, templates.Success(nil, "success callback", user))
	}
}


		// res, err := cont.r.GetVisitList(user.Email, "pending")
		// if err != nil {
		// 	return c.JSON(http.StatusInternalServerError, templates.InternalServerError(nil, "error in connect database "+err.Error(), nil))
		// }

		// var layout = "02-01-2006"
		// dateConv, err := time.Parse(layout, res.Date)
		// if err != nil {
		// 	return c.JSON(http.StatusInternalServerError, templates.InternalServerError(nil, "error in parsing date "+err.Error(), nil))
		// }

		// var client = cont.conf.Client(ctx, token)
		// srv, err := calendar.NewService(ctx, option.WithHTTPClient(client))
		// if err != nil {
		// 	return c.JSON(http.StatusBadRequest, templates.BadRequest(nil, "error in run calendar "+err.Error(), nil))
		// }

		// var eventInput = &calendar.Event{
		// 	Summary:     "Apppoinment with " + res.DoctorName,
		// 	Location:    res.Address,
		// 	Description: res.Complaint,
		// 	Start: &calendar.EventDateTime{
		// 		DateTime: dateConv.Local().Format(time.RFC3339),
		// 	},
		// 	End: &calendar.EventDateTime{
		// 		DateTime: dateConv.Add(24 * time.Hour).Local().Format(time.RFC3339),
		// 	},
		// 	Attendees: []*calendar.EventAttendee{
		// 		{DisplayName: res.DoctorName, Email: res.DoctorEmail},
		// 	},
		// 	Reminders: &calendar.EventReminders{
		// 		UseDefault: false,
		// 		Overrides: []*calendar.EventReminder{
		// 			{Method: "email", Minutes: 24 * 60},
		// 			{Method: "email", Minutes: 2 * 60},
		// 			{Method: "email", Minutes: 1 * 60},
		// 			{Method: "email", Minutes: 30},
		// 			{Method: "email", Minutes: 15},
		// 		},
		// 		ForceSendFields: []string{"UseDefault"},
		// 		NullFields:      nil,
		// 	},
		// }

		// event, err := srv.Events.Insert("primary", eventInput).Do()
		// if err != nil {
		// 	return c.JSON(http.StatusBadRequest, templates.BadRequest(nil, "error in run calendar "+err.Error(), nil))
		// }